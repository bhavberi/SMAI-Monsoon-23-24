==========================================
SLURM_JOB_ID = 1018126
SLURM_NODELIST = gnode051
SLURM_JOB_GPUS = 
==========================================
Fitting 5 folds for each of 144 candidates, totalling 720 fits
Best params: {'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
Fitting 5 folds for each of 288 candidates, totalling 1440 fits
Best params: {'criterion': 'absolute_error', 'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 10, 'splitter': 'best'}
Best params: {'learning_rate': 0.001, 'num_epochs': 15}
Best params: {'learning_rate': 0.1, 'num_epochs': 2000}
Best params: {'input_size': 12, 'num_classes': 11, 'optimizer': 'sgd', 'activation': 'sigmoid', 'hidden_layers': [8], 'learning_rate': 0.01, 'batch_size': 32, 'max_epochs': 1000}
Best params: {'input_size': 13, 'optimizer': 'sgd', 'activation': 'relu', 'hidden_layers': [8], 'learning_rate': 0.001, 'batch_size': 32, 'max_epochs': 1000}
  0%|          | 0/80 [00:00<?, ?it/s]  1%|▏         | 1/80 [00:20<26:44, 20.31s/it]  2%|▎         | 2/80 [00:39<25:35, 19.69s/it]  4%|▍         | 3/80 [00:58<24:49, 19.34s/it]  5%|▌         | 4/80 [01:17<24:22, 19.25s/it]  6%|▋         | 5/80 [01:50<30:05, 24.08s/it]  8%|▊         | 6/80 [02:22<33:10, 26.89s/it]  9%|▉         | 7/80 [02:54<34:40, 28.51s/it] 10%|█         | 8/80 [03:26<35:44, 29.78s/it] 11%|█▏        | 9/80 [04:32<48:20, 40.86s/it] 12%|█▎        | 10/80 [05:36<55:57, 47.97s/it] 14%|█▍        | 11/80 [06:39<1:00:32, 52.65s/it] 15%|█▌        | 12/80 [07:43<1:03:36, 56.13s/it] 16%|█▋        | 13/80 [09:17<1:15:26, 67.57s/it] 18%|█▊        | 14/80 [10:52<1:23:36, 76.00s/it] 21%|██▏       | 17/80 [12:59<59:45, 56.92s/it]   22%|██▎       | 18/80 [15:07<1:14:20, 71.94s/it] 26%|██▋       | 21/80 [15:55<44:34, 45.34s/it]   28%|██▊       | 22/80 [16:42<44:10, 45.70s/it] 29%|██▉       | 23/80 [17:29<43:43, 46.02s/it] 30%|███       | 24/80 [18:17<43:14, 46.33s/it] 31%|███▏      | 25/80 [19:36<49:55, 54.46s/it] 32%|███▎      | 26/80 [20:54<54:38, 60.72s/it] 36%|███▋      | 29/80 [23:31<47:48, 56.25s/it] 38%|███▊      | 30/80 [26:07<1:03:34, 76.30s/it] 41%|████▏     | 33/80 [30:06<1:00:56, 77.80s/it] 42%|████▎     | 34/80 [34:06<1:22:11, 107.21s/it] 44%|████▍     | 35/80 [34:07<1:03:58, 85.30s/it]  46%|████▋     | 37/80 [39:24<1:20:34, 112.42s/it] 48%|████▊     | 38/80 [44:47<1:49:24, 156.30s/it] 51%|█████▏    | 41/80 [46:25<1:03:39, 97.92s/it]  52%|█████▎    | 42/80 [48:00<1:01:42, 97.43s/it] 56%|█████▋    | 45/80 [50:40<45:32, 78.07s/it]   57%|█████▊    | 46/80 [53:21<52:18, 92.30s/it] 61%|██████▏   | 49/80 [58:33<50:19, 97.39s/it] 62%|██████▎   | 50/80 [1:03:48<1:07:03, 134.11s/it] 66%|██████▋   | 53/80 [1:11:38<1:04:34, 143.49s/it] 68%|██████▊   | 54/80 [1:19:26<1:25:34, 197.50s/it] 71%|███████▏  | 57/80 [1:29:52<1:17:30, 202.19s/it] 72%|███████▎  | 58/80 [1:40:34<1:40:50, 275.02s/it] 76%|███████▋  | 61/80 [1:43:43<59:14, 187.07s/it]   78%|███████▊  | 62/80 [1:46:53<56:14, 187.46s/it] 81%|████████▏ | 65/80 [1:52:08<38:19, 153.29s/it] 82%|████████▎ | 66/80 [1:57:22<41:58, 179.87s/it] 86%|████████▋ | 69/80 [2:07:51<35:13, 192.10s/it] 88%|████████▊ | 70/80 [2:18:14<43:51, 263.11s/it] 91%|█████████▏| 73/80 [2:33:57<33:10, 284.29s/it] 92%|█████████▎| 74/80 [2:49:35<39:11, 391.86s/it] 96%|█████████▋| 77/80 [3:10:33<20:09, 403.19s/it] 98%|█████████▊| 78/80 [3:31:21<18:04, 542.26s/it]100%|██████████| 80/80 [3:31:21<00:00, 158.52s/it]
Best params for bagging with DecisionTreeClassifier: [20, 1.0, True, False, 0.6506550218340611]
Best params for bagging with DecisionTreeRegressor: [20, 1.0, True, False, 0.7949023674176547]
Best params for bagging with Logistic Regression: [2, 0.25, False, True, 0.5676855895196506]
Best params for bagging with Linear Regression: [2, 0.25, False, False, 0.6890186855849787]
Best params for bagging with MLP Classifier: [5, 0.15, True, False, 0.6637554585152838]
Best params for bagging with MLP Regressor: [20, 1.0, True, True, 0.8290381280402599]
{2: {0.15: 0.6026200873362445, 0.25: 0.611353711790393, 0.5: 0.611353711790393, 0.75: 0.6026200873362445, 1.0: 0.6200873362445415}, 5: {0.15: 0.5982532751091703, 0.25: 0.5982532751091703, 0.5: 0.6550218340611353, 0.75: 0.6026200873362445, 1.0: 0.5982532751091703}, 10: {0.15: 0.62882096069869, 0.25: 0.6069868995633187, 0.5: 0.6026200873362445, 0.75: 0.611353711790393, 1.0: 0.6026200873362445}, 20: {0.15: 0.611353711790393, 0.25: 0.6026200873362445, 0.5: 0.611353711790393, 0.75: 0.6200873362445415, 1.0: 0.6157205240174672}}
{2: {0.15: 0.6922612673349064, 0.25: 0.6745026795753226, 0.5: 0.7418086964185971, 0.75: 0.7626856239158444, 1.0: 0.7445682137802798}, 5: {0.15: 0.4392033228084198, 0.25: 0.7689867702310561, 0.5: 0.8046590808546144, 0.75: 0.7972732666865802, 1.0: 0.8134497408840893}, 10: {0.15: 0.7677323184587985, 0.25: 0.7768542316993838, 0.5: 0.8079445997795309, 0.75: 0.810382057317039, 1.0: 0.8004196580307044}, 20: {0.15: 0.7884503309319918, 0.25: 0.7991162964322427, 0.5: 0.7765991327844306, 0.75: 0.8046952608036602, 1.0: 0.8290381280402599}}
Best hyperparameter for stacking classifier: {'method': 'stacking', 'n_fold': 5, 'level1_model': 'DecisionTreeClassifier', 'level1_params': {'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, 'accuracy': 0.5982532751091703}
Best hyperparameter for stacking regressor: {'method': 'stacking', 'n_fold': 3, 'level1_model': 'DecisionTreeRegressor', 'level1_params': {'criterion': 'absolute_error', 'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 10, 'splitter': 'best'}, 'accuracy': 0.7808412507378455}
Best n_estimators for RandomForestClassifier: {'n_estimators': 30, 'best_params': {'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}}
Accuracy for RandomForestClassifier: 0.6244541484716157
Best n_estimators for RandomForestRegressor: {'n_estimators': 5, 'best_params': {'criterion': 'absolute_error', 'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 10, 'splitter': 'best'}}
Accuracy for RandomForestRegressor: 0.7776443318450862
Best no. of estimators for AdaBoostClassifier: 30
Best accuracy for AdaBoostClassifier: 0.7641921397379913
Best no. of estimators for AdaBoostRegressor: 30
Best score for AdaBoostRegressor: 0.9003114403670691
  0%|          | 0/12 [00:00<?, ?it/s]  8%|▊         | 1/12 [00:00<00:02,  4.59it/s] 17%|█▋        | 2/12 [00:00<00:02,  4.63it/s] 25%|██▌       | 3/12 [00:00<00:01,  4.61it/s] 33%|███▎      | 4/12 [00:01<00:02,  3.38it/s] 42%|████▏     | 5/12 [00:01<00:02,  2.78it/s] 50%|█████     | 6/12 [00:01<00:02,  2.61it/s] 58%|█████▊    | 7/12 [00:03<00:03,  1.66it/s] 67%|██████▋   | 8/12 [00:04<00:03,  1.20it/s] 75%|███████▌  | 9/12 [00:05<00:02,  1.09it/s] 83%|████████▎ | 10/12 [00:07<00:02,  1.32s/it] 92%|█████████▏| 11/12 [00:10<00:01,  1.73s/it]100%|██████████| 12/12 [00:12<00:00,  1.89s/it]100%|██████████| 12/12 [00:12<00:00,  1.05s/it]
Best no. of estimators for GradientBoostingClassifier: 50.0
Best learning rate for GradientBoostingClassifier: 0.1
Best accuracy for GradientBoostingClassifier: 0.7161572052401747
Best no. of estimators for GradientBoostingRegressor: 50.0
Best learning rate for GradientBoostingRegressor: 0.5
Best score for GradientBoostingRegressor: 0.8217753314498457
Done
